var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [CheckedCalls]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#CheckedCalls.CheckedCalls","page":"API","title":"CheckedCalls.CheckedCalls","text":"CheckedCalls\n\nFunction calls with additional checks.\n\n\n\n\n\n","category":"module"},{"location":"api/#CheckedCalls.CheckedFunction","page":"API","title":"CheckedCalls.CheckedFunction","text":"struct CheckedFunction{F}\n\nDefault return value of checkedcall(f).\n\nDo not instantiate this type directly, use checkedcall(f) instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#CheckedCalls.ReturnValueContainsNaN","page":"API","title":"CheckedCalls.ReturnValueContainsNaN","text":"struct ReturnValueContainsNaN <: Exception\n\nException to be thrown if the return value r of a function f is or contains a NaN value when called with arguments args.\n\nConstructors:\n\nReturnValueContainsNaN(r, f, args)\nReturnValueContainsNaN(r, f, args, cause)\n\ncause is missing by default, but should may be set to anything that indicates the cause of the NaN value, including another ReturnValueContainsNaN instance that was encountered while computing f(args...).\n\n\n\n\n\n","category":"type"},{"location":"api/#CheckedCalls.checkedcall","page":"API","title":"CheckedCalls.checkedcall","text":"checkedcall(f, args...)\ncheckedcall(f)\n\nCalls f(args...), checks the result for abnormalities, and either returns the result or throws an exception.\n\ncheckedcall(f)(args...) is equivalent to checkedcall(f, args...).\n\nBy default, checks the return value with containsnan.\n\ncheckedcall should be specialized if the underlying cause of the abnormality can be determined more precisely without undue computational overhead. For example for\n\nchained(f, g, x) = f(g(x))\n\nOne may want to specialize\n\nfunction checkedcall(::typeof(chained), f, g, x)\n    checkedcall(f, checkedcall(g, x))\nend\n\ncheckedcall may also be specialized to perform additional output (and input) value checks for specific functions, checks do not need to be limited to NaN values.\n\n\n\n\n\n","category":"function"},{"location":"api/#CheckedCalls.containsnan","page":"API","title":"CheckedCalls.containsnan","text":"containsnan(x)::Bool\n\nChecks if x definitely is or contains a NaN value.\n\nReturns false if containsnan is not defined for the type of x and should also return false if checking x would be computationally expensive.\n\n\n\n\n\n","category":"function"},{"location":"api/#CheckedCalls.throw_if_containsnan-Tuple{Any, Any, Any}","page":"API","title":"CheckedCalls.throw_if_containsnan","text":"throw_if_containsnan(r, f, args)\n\nUtility function that checks if a value r, assumed to be the result of f(args...), contains NaN values and if so, throws an ReturnValueContainsNaN exception.\n\nthrow_if_containsnan comes with an specialized ChainRulesCore.rrule to avoid computational overhead during automatic differentiation.\n\n\n\n\n\n","category":"method"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#CheckedCalls.jl","page":"Home","title":"CheckedCalls.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CheckedCalls let's you call Julia functions with additional checks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main function provided by the package is checkedcall(f, args...). By default, it check if the return value of f(args...) contains NaN values. While 0 / 0 returns NaN,","category":"page"},{"location":"","page":"Home","title":"Home","text":"checkedcall(/, 0, 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"throws an ReturnValueContainsNaN exception. checkedcall is indended to be specialized for specific functions, and checks do not need to be limited to checking for NaN values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package also provides the utility function containsnan(x).","category":"page"}]
}
